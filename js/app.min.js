/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);

/***/ },
/* 1 */
/***/ function(module, exports) {

	console.log("module 1 loaded");
	
	var context = new AudioContext();
	
	var osc1 = context.createOscillator();
	osc1.type = 'square';
	osc1.frequency.value = 660;
	
	var gain1 = context.createGain();
	
	osc1.connect(gain1);
	gain1.connect(context.destination);
	osc1.start();
	
	console.log(document.getElementsByClassName('mute'))
	var mute = document.getElementsByClassName('mute')[0];
	
	mute.onclick = voiceMute;
	
	function voiceMute() {
	  if(mute.id == "") {
	  	document.onmousemove = "";
	    gain1.gain.value = 0;
	    mute.id = "activated";
	    mute.innerHTML = "Unmute";
	  } else {
	  	document.onmousemove = updatePage;
	    gain1.gain.value = 1;
	    mute.id = "";
	    mute.innerHTML = "Mute";
	  }
	}
	
	var WIDTH = window.innerWidth;
	var HEIGHT = window.innerHeight;
	
	var maxFreq = 6000;
	var maxVol = 1;
	
	var initialFreq = 3000;
	var initialVol = 0.5;
	
	
	// Mouse pointer coordinates
	
	var CurX;
	var CurY;
	
	// Get new mouse pointer coordinates when mouse is moved
	// then set new gain and pitch values
	
	document.onmousemove = updatePage;
	
	function updatePage(e) {   
	    CurX = (window.Event) ? e.pageX : event.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);
	    CurY = (window.Event) ? e.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
	    
	    osc1.frequency.value = (CurX/WIDTH) * maxFreq;
	    gain1.gain.value = (CurY/HEIGHT) * maxVol;
	
	    canvasDraw();
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	console.log("module 2 loaded");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNzkyNjE4N2VhYzczODJhM2YxMmQiLCJ3ZWJwYWNrOi8vLy4vanMvYXBwLmpzIiwid2VicGFjazovLy8uL2pzL21vZHVsZTEuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kdWxlMi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQTtBQUNBLHdCOzs7Ozs7QUNEQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBLHlCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsRTs7Ozs7O0FDN0RBLGdDIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSlcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcblxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0ZXhwb3J0czoge30sXG4gXHRcdFx0aWQ6IG1vZHVsZUlkLFxuIFx0XHRcdGxvYWRlZDogZmFsc2VcbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIHdlYnBhY2svYm9vdHN0cmFwIDc5MjYxODdlYWM3MzgyYTNmMTJkXG4gKiovIiwicmVxdWlyZSgnLi9tb2R1bGUxLmpzJyk7XG5yZXF1aXJlKCcuL21vZHVsZTIuanMnKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vanMvYXBwLmpzXG4gKiogbW9kdWxlIGlkID0gMFxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiY29uc29sZS5sb2coXCJtb2R1bGUgMSBsb2FkZWRcIik7XG5cbnZhciBjb250ZXh0ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuXG52YXIgb3NjMSA9IGNvbnRleHQuY3JlYXRlT3NjaWxsYXRvcigpO1xub3NjMS50eXBlID0gJ3NxdWFyZSc7XG5vc2MxLmZyZXF1ZW5jeS52YWx1ZSA9IDY2MDtcblxudmFyIGdhaW4xID0gY29udGV4dC5jcmVhdGVHYWluKCk7XG5cbm9zYzEuY29ubmVjdChnYWluMSk7XG5nYWluMS5jb25uZWN0KGNvbnRleHQuZGVzdGluYXRpb24pO1xub3NjMS5zdGFydCgpO1xuXG5jb25zb2xlLmxvZyhkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtdXRlJykpXG52YXIgbXV0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ211dGUnKVswXTtcblxubXV0ZS5vbmNsaWNrID0gdm9pY2VNdXRlO1xuXG5mdW5jdGlvbiB2b2ljZU11dGUoKSB7XG4gIGlmKG11dGUuaWQgPT0gXCJcIikge1xuICBcdGRvY3VtZW50Lm9ubW91c2Vtb3ZlID0gXCJcIjtcbiAgICBnYWluMS5nYWluLnZhbHVlID0gMDtcbiAgICBtdXRlLmlkID0gXCJhY3RpdmF0ZWRcIjtcbiAgICBtdXRlLmlubmVySFRNTCA9IFwiVW5tdXRlXCI7XG4gIH0gZWxzZSB7XG4gIFx0ZG9jdW1lbnQub25tb3VzZW1vdmUgPSB1cGRhdGVQYWdlO1xuICAgIGdhaW4xLmdhaW4udmFsdWUgPSAxO1xuICAgIG11dGUuaWQgPSBcIlwiO1xuICAgIG11dGUuaW5uZXJIVE1MID0gXCJNdXRlXCI7XG4gIH1cbn1cblxudmFyIFdJRFRIID0gd2luZG93LmlubmVyV2lkdGg7XG52YXIgSEVJR0hUID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG52YXIgbWF4RnJlcSA9IDYwMDA7XG52YXIgbWF4Vm9sID0gMTtcblxudmFyIGluaXRpYWxGcmVxID0gMzAwMDtcbnZhciBpbml0aWFsVm9sID0gMC41O1xuXG5cbi8vIE1vdXNlIHBvaW50ZXIgY29vcmRpbmF0ZXNcblxudmFyIEN1clg7XG52YXIgQ3VyWTtcblxuLy8gR2V0IG5ldyBtb3VzZSBwb2ludGVyIGNvb3JkaW5hdGVzIHdoZW4gbW91c2UgaXMgbW92ZWRcbi8vIHRoZW4gc2V0IG5ldyBnYWluIGFuZCBwaXRjaCB2YWx1ZXNcblxuZG9jdW1lbnQub25tb3VzZW1vdmUgPSB1cGRhdGVQYWdlO1xuXG5mdW5jdGlvbiB1cGRhdGVQYWdlKGUpIHsgICBcbiAgICBDdXJYID0gKHdpbmRvdy5FdmVudCkgPyBlLnBhZ2VYIDogZXZlbnQuY2xpZW50WCArIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdCA/IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0IDogZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0KTtcbiAgICBDdXJZID0gKHdpbmRvdy5FdmVudCkgPyBlLnBhZ2VZIDogZXZlbnQuY2xpZW50WSArIChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCA6IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKTtcbiAgICBcbiAgICBvc2MxLmZyZXF1ZW5jeS52YWx1ZSA9IChDdXJYL1dJRFRIKSAqIG1heEZyZXE7XG4gICAgZ2FpbjEuZ2Fpbi52YWx1ZSA9IChDdXJZL0hFSUdIVCkgKiBtYXhWb2w7XG5cbiAgICBjYW52YXNEcmF3KCk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL2pzL21vZHVsZTEuanNcbiAqKiBtb2R1bGUgaWQgPSAxXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJjb25zb2xlLmxvZyhcIm1vZHVsZSAyIGxvYWRlZFwiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vanMvbW9kdWxlMi5qc1xuICoqIG1vZHVsZSBpZCA9IDJcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyJdLCJzb3VyY2VSb290IjoiIn0=