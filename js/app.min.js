/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(2);

/***/ },
/* 1 */
/***/ function(module, exports) {

	console.log("module 1 loaded");
	
	var context = new AudioContext();
	
	var osc1 = context.createOscillator();
	osc1.type = 'square';
	osc1.frequency.value = 660;
	
	var gain1 = context.createGain();
	
	osc1.connect(gain1);
	gain1.connect(context.destination);
	osc1.start();
	
	console.log(document.getElementsByClassName('mute'))
	var mute = document.getElementsByClassName('mute')[0];
	
	mute.onclick = voiceMute;
	
	function voiceMute() {
	  if(mute.id == "") {
	  	document.onmousemove = "";
	    gain1.gain.value = 0;
	    mute.id = "activated";
	    mute.innerHTML = "Unmute";
	  } else {
	  	document.onmousemove = updatePage;
	    gain1.gain.value = 1;
	    mute.id = "";
	    mute.innerHTML = "Mute";
	  }
	}
	
	var WIDTH = window.innerWidth;
	var HEIGHT = window.innerHeight;
	
	var maxFreq = 6000;
	var maxVol = 1;
	var maxRed = 255;
	var maxBlue = 255;
	
	var initialFreq = 3000;
	var initialVol = 0.5;
	
	
	// Mouse pointer coordinates
	
	var CurX;
	var CurY;
	
	// Get new mouse pointer coordinates when mouse is moved
	// then set new gain and pitch values
	
	document.onmousemove = updatePage;
	
	var canvas = document.querySelector('.canvas');
	console.log(typeof canvas)
	canvas.width = WIDTH;
	canvas.height = HEIGHT;
	
	
	function updatePage(e) {   
	    CurX = (window.Event) ? e.pageX : event.clientX + (document.documentElement.scrollLeft ? document.documentElement.scrollLeft : document.body.scrollLeft);
	    CurY = (window.Event) ? e.pageY : event.clientY + (document.documentElement.scrollTop ? document.documentElement.scrollTop : document.body.scrollTop);
	    
	    osc1.frequency.value = (CurX/WIDTH) * maxFreq;
	    gain1.gain.value = (CurY/HEIGHT) * maxVol;
	    // document.body.style.backgroundColor = (CurX/WIDTH) * maxRed;
	    // document.body.style.backgroundColor = (CurY/WIDTH) * maxBlue;
	
	
	
		var canvasCtx = canvas.getContext('2d');
	
		canvasCtx.fillStyle = 'rgb(' + (CurY/WIDTH) * maxBlue + ', 128, ' + (CurY/WIDTH) * maxBlue + ')';
	
	    //canvasDraw();
	}

/***/ },
/* 2 */
/***/ function(module, exports) {

	console.log("module 2 loaded");

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZDhkYWJkNzM4M2E0MmI4NWRhYTUiLCJ3ZWJwYWNrOi8vLy4vanMvYXBwLmpzIiwid2VicGFjazovLy8uL2pzL21vZHVsZTEuanMiLCJ3ZWJwYWNrOi8vLy4vanMvbW9kdWxlMi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsdUJBQWU7QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7OztBQ3RDQTtBQUNBLHdCOzs7Ozs7QUNEQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0EseUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7O0FBRUE7O0FBRUE7QUFDQSxFOzs7Ozs7QUM3RUEsZ0MiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuXG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRleHBvcnRzOiB7fSxcbiBcdFx0XHRpZDogbW9kdWxlSWQsXG4gXHRcdFx0bG9hZGVkOiBmYWxzZVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogd2VicGFjay9ib290c3RyYXAgZDhkYWJkNzM4M2E0MmI4NWRhYTVcbiAqKi8iLCJyZXF1aXJlKCcuL21vZHVsZTEuanMnKTtcbnJlcXVpcmUoJy4vbW9kdWxlMi5qcycpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9qcy9hcHAuanNcbiAqKiBtb2R1bGUgaWQgPSAwXG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJjb25zb2xlLmxvZyhcIm1vZHVsZSAxIGxvYWRlZFwiKTtcblxudmFyIGNvbnRleHQgPSBuZXcgQXVkaW9Db250ZXh0KCk7XG5cbnZhciBvc2MxID0gY29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XG5vc2MxLnR5cGUgPSAnc3F1YXJlJztcbm9zYzEuZnJlcXVlbmN5LnZhbHVlID0gNjYwO1xuXG52YXIgZ2FpbjEgPSBjb250ZXh0LmNyZWF0ZUdhaW4oKTtcblxub3NjMS5jb25uZWN0KGdhaW4xKTtcbmdhaW4xLmNvbm5lY3QoY29udGV4dC5kZXN0aW5hdGlvbik7XG5vc2MxLnN0YXJ0KCk7XG5cbmNvbnNvbGUubG9nKGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ211dGUnKSlcbnZhciBtdXRlID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbXV0ZScpWzBdO1xuXG5tdXRlLm9uY2xpY2sgPSB2b2ljZU11dGU7XG5cbmZ1bmN0aW9uIHZvaWNlTXV0ZSgpIHtcbiAgaWYobXV0ZS5pZCA9PSBcIlwiKSB7XG4gIFx0ZG9jdW1lbnQub25tb3VzZW1vdmUgPSBcIlwiO1xuICAgIGdhaW4xLmdhaW4udmFsdWUgPSAwO1xuICAgIG11dGUuaWQgPSBcImFjdGl2YXRlZFwiO1xuICAgIG11dGUuaW5uZXJIVE1MID0gXCJVbm11dGVcIjtcbiAgfSBlbHNlIHtcbiAgXHRkb2N1bWVudC5vbm1vdXNlbW92ZSA9IHVwZGF0ZVBhZ2U7XG4gICAgZ2FpbjEuZ2Fpbi52YWx1ZSA9IDE7XG4gICAgbXV0ZS5pZCA9IFwiXCI7XG4gICAgbXV0ZS5pbm5lckhUTUwgPSBcIk11dGVcIjtcbiAgfVxufVxuXG52YXIgV0lEVEggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbnZhciBIRUlHSFQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG5cbnZhciBtYXhGcmVxID0gNjAwMDtcbnZhciBtYXhWb2wgPSAxO1xudmFyIG1heFJlZCA9IDI1NTtcbnZhciBtYXhCbHVlID0gMjU1O1xuXG52YXIgaW5pdGlhbEZyZXEgPSAzMDAwO1xudmFyIGluaXRpYWxWb2wgPSAwLjU7XG5cblxuLy8gTW91c2UgcG9pbnRlciBjb29yZGluYXRlc1xuXG52YXIgQ3VyWDtcbnZhciBDdXJZO1xuXG4vLyBHZXQgbmV3IG1vdXNlIHBvaW50ZXIgY29vcmRpbmF0ZXMgd2hlbiBtb3VzZSBpcyBtb3ZlZFxuLy8gdGhlbiBzZXQgbmV3IGdhaW4gYW5kIHBpdGNoIHZhbHVlc1xuXG5kb2N1bWVudC5vbm1vdXNlbW92ZSA9IHVwZGF0ZVBhZ2U7XG5cbnZhciBjYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2FudmFzJyk7XG5jb25zb2xlLmxvZyh0eXBlb2YgY2FudmFzKVxuY2FudmFzLndpZHRoID0gV0lEVEg7XG5jYW52YXMuaGVpZ2h0ID0gSEVJR0hUO1xuXG5cbmZ1bmN0aW9uIHVwZGF0ZVBhZ2UoZSkgeyAgIFxuICAgIEN1clggPSAod2luZG93LkV2ZW50KSA/IGUucGFnZVggOiBldmVudC5jbGllbnRYICsgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgOiBkb2N1bWVudC5ib2R5LnNjcm9sbExlZnQpO1xuICAgIEN1clkgPSAod2luZG93LkV2ZW50KSA/IGUucGFnZVkgOiBldmVudC5jbGllbnRZICsgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3AgPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIDogZG9jdW1lbnQuYm9keS5zY3JvbGxUb3ApO1xuICAgIFxuICAgIG9zYzEuZnJlcXVlbmN5LnZhbHVlID0gKEN1clgvV0lEVEgpICogbWF4RnJlcTtcbiAgICBnYWluMS5nYWluLnZhbHVlID0gKEN1clkvSEVJR0hUKSAqIG1heFZvbDtcbiAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IChDdXJYL1dJRFRIKSAqIG1heFJlZDtcbiAgICAvLyBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IChDdXJZL1dJRFRIKSAqIG1heEJsdWU7XG5cblxuXG5cdHZhciBjYW52YXNDdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuXHRjYW52YXNDdHguZmlsbFN0eWxlID0gJ3JnYignICsgKEN1clkvV0lEVEgpICogbWF4Qmx1ZSArICcsIDEyOCwgJyArIChDdXJZL1dJRFRIKSAqIG1heEJsdWUgKyAnKSc7XG5cbiAgICAvL2NhbnZhc0RyYXcoKTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vanMvbW9kdWxlMS5qc1xuICoqIG1vZHVsZSBpZCA9IDFcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImNvbnNvbGUubG9nKFwibW9kdWxlIDIgbG9hZGVkXCIpO1xuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9qcy9tb2R1bGUyLmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sInNvdXJjZVJvb3QiOiIifQ==